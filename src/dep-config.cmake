SET ( Boost_FIND_REQUIRED TRUE )
SET ( Boost_USE_MULTITHREADED ON )
SET ( Boost_USE_STATIC_LIBS OFF )

SET ( GEOIP_FIND_REQUIRED TRUE )
SET ( GEOLITE_COUNTRY_FIND_REQUIRED TRUE )
SET ( GEOLITE_CITY_FIND_REQUIRED TRUE )

SET ( MAGICKPP_FIND_REQUIRED TRUE )
SET ( MAGICKPP_CONFIG_FIND_REQUIRED TRUE )

SET ( STATGRAB_FIND_REQUIRED TRUE )

SET ( WT_FIND_REQUIRED TRUE )
SET ( WT_FCGI_FIND_REQUIRED TRUE )

SET ( ZEROMQ_FIND_REQUIRED TRUE )



### Boost ###

FIND_PACKAGE (Boost 1.45.0
    COMPONENTS
        date_time filesystem program_options
        random regex signals system thread
    )


IF ( Boost_FOUND )
    SET ( DEP_FOUND TRUE )
ELSE ( Boost_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( Boost_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find Boost" )
    ENDIF ( Boost_FIND_REQUIRED )
ENDIF ( Boost_FOUND )



### GeoIP ###

FIND_PATH ( GEOIP_INCLUDE_DIR NAMES GeoIP.h PATHS /usr/include/ /usr/local/include/ )
FIND_LIBRARY ( GEOIP_LIBRARY NAMES GeoIP PATHS /usr/lib /usr/local/lib )
FIND_FILE ( GEOLITE_COUNTRY_DB NAMES GeoIP/GeoIP.dat PATHS /usr/share/ /usr/local/share/ )
FIND_FILE ( GEOLITE_CITY_DB NAMES GeoIP/GeoLiteCity.dat PATHS /usr/share/ /usr/local/share/ )

IF ( GEOIP_INCLUDE_DIR AND GEOIP_LIBRARY )
    SET ( GEOIP_FOUND TRUE )
ENDIF ( GEOIP_INCLUDE_DIR AND GEOIP_LIBRARY )

IF ( GEOLITE_COUNTRY_DB)
    SET ( GEOLITE_COUNTRY_FOUND TRUE )
ENDIF ( GEOLITE_COUNTRY_DB)

IF ( GEOLITE_CITY_DB)
    SET ( GEOLITE_CITY_FOUND TRUE )
ENDIF ( GEOLITE_CITY_DB)


IF ( GEOIP_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT GEOIP_FIND_QUIETLY )
        MESSAGE ( STATUS "Found GeoIP:" )
        MESSAGE ( STATUS "  (Headers)    ${GEOIP_INCLUDE_DIR}" )
        MESSAGE ( STATUS "  (Library)    ${GEOIP_LIBRARY}" )
    ENDIF ( NOT GEOIP_FIND_QUIETLY )
ELSE ( GEOIP_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( GEOIP_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find GeoIP" )
    ENDIF ( GEOIP_FIND_REQUIRED )
ENDIF ( GEOIP_FOUND )


IF ( GEOLITE_COUNTRY_FOUND )
    SET ( DEP_FOUND TRUE )
    MESSAGE ( STATUS "  (Country db) ${GEOLITE_COUNTRY_DB}" )
ELSE ( GEOLITE_COUNTRY_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( GEOLITE_COUNTRY_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find GeoLite-Country db" )
    ENDIF ( GEOLITE_COUNTRY_FIND_REQUIRED )
ENDIF ( GEOLITE_COUNTRY_FOUND )


IF ( GEOLITE_CITY_FOUND )
    SET ( DEP_FOUND TRUE )
    MESSAGE ( STATUS "  (City db)    ${GEOLITE_CITY_DB}" )
ELSE ( GEOLITE_CITY_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( GEOLITE_CITY_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find GeoLite-City db" )
    ENDIF ( GEOLITE_CITY_FIND_REQUIRED )
ENDIF ( GEOLITE_CITY_FOUND )



### Magick++ ###

FIND_PATH ( MAGICKPP_INCLUDE_DIR NAMES GraphicsMagick PATHS /usr/include/ /usr/local/include/ )
FIND_LIBRARY ( MAGICKPP_LIBRARY NAMES GraphicsMagick++ PATHS /usr/lib /usr/local/lib )
FIND_FILE ( MAGICKPP_CONFIG_SCRIPT NAMES GraphicsMagick++-config PATHS /usr/bin /usr/local/bin )

IF ( MAGICKPP_INCLUDE_DIR AND MAGICKPP_LIBRARY )
    SET ( MAGICKPP_FOUND TRUE )
ENDIF ( MAGICKPP_INCLUDE_DIR AND MAGICKPP_LIBRARY )

IF ( MAGICKPP_CONFIG_SCRIPT)
    SET ( MAGICKPP_CONFIG_FOUND TRUE )
ENDIF ( MAGICKPP_CONFIG_SCRIPT)


IF ( MAGICKPP_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT MAGICKPP_FIND_QUIETLY )
        MESSAGE ( STATUS "Found GraphicsMagick++:" )
        MESSAGE ( STATUS "  (Headers)       ${MAGICKPP_INCLUDE_DIR}" )
        MESSAGE ( STATUS "  (Library)       ${MAGICKPP_LIBRARY}" )
    ENDIF ( NOT MAGICKPP_FIND_QUIETLY )
ELSE ( MAGICKPP_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( MAGICKPP_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find GraphicsMagick++" )
    ENDIF ( MAGICKPP_FIND_REQUIRED )
ENDIF ( MAGICKPP_FOUND )


IF ( MAGICKPP_CONFIG_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT MAGICKPP_CONFIG_FIND_QUIETLY )
        EXEC_PROGRAM ("${MAGICKPP_CONFIG_SCRIPT}" ARGS --cppflags | sed 's/-I//g' OUTPUT_VARIABLE MAGICKPP_INCLUDE_DIR)
        # Alternative way
        #EXEC_PROGRAM ("${MAGICKPP_CONFIG_SCRIPT}" ARGS --libs | cut -d ' ' -f '2-99' | sed 's/ -l/ /g' | sed 's/-l//' OUTPUT_VARIABLE MAGICKPP_FLAGS)
        EXEC_PROGRAM ("${MAGICKPP_CONFIG_SCRIPT}" ARGS --libs OUTPUT_VARIABLE MAGICKPP_FLAGS)
        MESSAGE ( STATUS "  (Helper Script) ${MAGICKPP_CONFIG_SCRIPT}" )
    ENDIF ( NOT MAGICKPP_CONFIG_FIND_QUIETLY )
ELSE ( MAGICKPP_CONFIG_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( MAGICKPP_CONFIG_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find GraphicsMagick++ Helper Script" )
    ENDIF ( MAGICKPP_CONFIG_FIND_REQUIRED )
ENDIF ( MAGICKPP_CONFIG_FOUND )



### statgrab ###

FIND_PATH ( STATGRAB_INCLUDE_DIR NAMES statgrab.h PATHS /usr/include/ /usr/local/include/ )
FIND_LIBRARY ( STATGRAB_LIBRARY NAMES statgrab PATHS /usr/lib /usr/local/lib )
FIND_LIBRARY ( DEVSTAT_LIBRARY NAMES devstat PATHS /usr/lib /usr/local/lib )

IF ( STATGRAB_INCLUDE_DIR AND STATGRAB_LIBRARY )
    SET ( STATGRAB_FOUND TRUE )
ENDIF ( STATGRAB_INCLUDE_DIR AND STATGRAB_LIBRARY )

IF ( DEVSTAT_LIBRARY )
    SET ( DEVSTAT_FOUND TRUE )
ENDIF ( DEVSTAT_LIBRARY )


IF ( STATGRAB_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT STATGRAB_FIND_QUIETLY )
        MESSAGE ( STATUS "Found statgrab:" )
        MESSAGE ( STATUS "  (Headers) ${STATGRAB_INCLUDE_DIR}" )
        MESSAGE ( STATUS "  (Library) ${STATGRAB_LIBRARY}" )
    ENDIF ( NOT STATGRAB_FIND_QUIETLY )
ELSE ( STATGRAB_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( STATGRAB_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find statgrab" )
    ENDIF ( STATGRAB_FIND_REQUIRED )
ENDIF ( STATGRAB_FOUND )

IF (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
    IF ( DEVSTAT_FOUND )
            MESSAGE ( STATUS "  (DepLib)  ${DEVSTAT_LIBRARY}" )
    ELSE ( DEVSTAT_FOUND )
        SET ( DEP_FOUND FALSE )
        IF ( DEVSTAT_FIND_REQUIRED )
            MESSAGE ( FATAL_ERROR "Could not find devstat" )
        ENDIF ( DEVSTAT_FIND_REQUIRED )
    ENDIF ( DEVSTAT_FOUND )
ELSE ()
    SET ( DEVSTAT_LIBRARY "" )
ENDIF ()



### Wt ###

FIND_PATH ( WT_INCLUDE_DIR NAMES Wt PATHS /usr/include/ /usr/local/include/ )
FIND_LIBRARY ( WT_LIBRARY NAMES wt PATHS /usr/lib /usr/local/lib )
FIND_LIBRARY ( WT_FCGI_LIBRARY NAMES wtfcgi PATHS /usr/lib /usr/local/lib )

IF ( WT_INCLUDE_DIR AND WT_LIBRARY )
    SET ( WT_FOUND TRUE )
ENDIF ( WT_INCLUDE_DIR AND WT_LIBRARY )

IF ( WT_FCGI_LIBRARY )
    SET ( WT_FCGI_FOUND TRUE )
ENDIF ( WT_FCGI_LIBRARY )


IF ( WT_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT WT_FIND_QUIETLY )
        MESSAGE ( STATUS "Found Wt:" )
        MESSAGE ( STATUS "  (Headers)     ${WT_INCLUDE_DIR}" )
        MESSAGE ( STATUS "  (Library)     ${WT_LIBRARY}" )
    ENDIF ( NOT WT_FIND_QUIETLY )
ELSE ( WT_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( WT_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find Wt" )
    ENDIF ( WT_FIND_REQUIRED )
ENDIF ( WT_FOUND )


IF ( WT_FCGI_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT WT_FCGI_FIND_QUIETLY )
        MESSAGE ( STATUS "  (FastCGI Lib) ${WT_FCGI_LIBRARY}" )
    ENDIF ( NOT WT_FCGI_FIND_QUIETLY )
ELSE ( WT_FCGI_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( WT_FCGI_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find WtFastCGI" )
    ENDIF ( WT_FCGI_FIND_REQUIRED )
ENDIF ( WT_FCGI_FOUND )



### zeromq ###

FIND_PATH ( ZEROMQ_INCLUDE_DIR NAMES zmq.hpp PATHS /usr/include/ /usr/local/include/ )
FIND_LIBRARY ( ZEROMQ_LIBRARY NAMES zmq PATHS /usr/lib /usr/local/lib )

IF ( ZEROMQ_INCLUDE_DIR AND ZEROMQ_LIBRARY )
    SET ( ZEROMQ_FOUND TRUE )
ENDIF ( ZEROMQ_INCLUDE_DIR AND ZEROMQ_LIBRARY )


IF ( ZEROMQ_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT ZEROMQ_FIND_QUIETLY )
        MESSAGE ( STATUS "Found zeromq:" )
        MESSAGE ( STATUS "  (Headers)     ${ZEROMQ_INCLUDE_DIR}" )
        MESSAGE ( STATUS "  (Library)     ${ZEROMQ_LIBRARY}" )
    ENDIF ( NOT ZEROMQ_FIND_QUIETLY )
ELSE ( ZEROMQ_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( ZEROMQ_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find zeromq" )
    ENDIF ( ZEROMQ_FIND_REQUIRED )
ENDIF ( ZEROMQ_FOUND )




