CMAKE_MINIMUM_REQUIRED ( VERSION 2.8 FATAL_ERROR )
PROJECT ( CONTROLCONFERENCE )

SET ( dep_DIR ${CONTROLCONFERENCE_SOURCE_DIR} )
SET ( CMAKE_INSTALL_PREFIX "${CONTROLCONFERENCE_SOURCE_DIR}/../www/" )


SET ( CXX_FLAGS_WARN_LEVEL "-Wall -Wextra -Wno-unused-parameter" )
SET ( CXX_FLAGS_ISO_CPP "-pedantic" )
SET ( CXX_FLAGS_CPP11 "-std=c++0x" )
SET ( CXX_FLAGS_USE_PIPE "-pipe" )
SET ( CXX_FLAGS_OPT "-O2" )
SET ( CXX_FLAGS_OMIT_FP "-fomit-frame-pointer" )
SET ( CXX_FLAGS_SIZE_OPT "-ffunction-sections -fdata-sections" )
SET ( CXX_FLAGS_THREADS "-pthread" )
SET ( LD_FLAGS_SIZE_OPT "-Wl,--gc-sections" )

SET ( CMAKE_CXX_FLAGS "${CXX_FLAGS_WARN_LEVEL} ${CXX_FLAGS_ISO_CPP} ${CXX_FLAGS_CPP11} ${CXX_FLAGS_USE_PIPE} ${CXX_FLAGS_OPT} ${CXX_FLAGS_OMIT_FP} ${CXX_FLAGS_SIZE_OPT} ${CXX_FLAGS_THREADS}" )
SET ( CMAKE_EXE_LINKER_FLAGS "${LD_FLAGS_SIZE_OPT}" )

if (NATIVE_BUILD MATCHES "y")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native -mtune=native")
else (NATIVE_BUILD MATCHES "y")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=nocona -mtune=nocona")
endif (NATIVE_BUILD MATCHES "y")

FIND_PACKAGE( dep )

IF ( DEP_FOUND )
    INCLUDE_DIRECTORIES ( ${Boost_INCLUDE_DIRS} )
    LINK_DIRECTORIES ( ${Boost_LIBRARY_DIRS} )

    INCLUDE_DIRECTORIES ( ${GEOIP_INCLUDE_DIR} )
    LINK_DIRECTORIES ( ${GEOIP_LIBRARY} )

    INCLUDE_DIRECTORIES ( ${MAGICKPP_INCLUDE_DIR} )
    LINK_DIRECTORIES ( ${MAGICKPP_LIBRARY} )

    INCLUDE_DIRECTORIES ( ${STATGRAB_INCLUDE_DIR} )
    LINK_DIRECTORIES ( ${DEVSTAT_LIBRARY} )
    LINK_DIRECTORIES ( ${STATGRAB_LIBRARY} )

    INCLUDE_DIRECTORIES ( ${WT_INCLUDE_DIR} )
    LINK_DIRECTORIES ( ${WT_LIBRARY} )
    LINK_DIRECTORIES ( ${WT_FCGI_LIBRARY} )

    INCLUDE_DIRECTORIES ( ${ZEROMQ_INCLUDE_DIR} )
    LINK_DIRECTORIES ( ${ZEROMQ_LIBRARY} )

    INCLUDE ( _src.cmake )

    SET ( ROOT_BIN "root.fcgi" )

    ADD_EXECUTABLE( ${ROOT_BIN} ${ROOT_SOURCE_FILES} )

    TARGET_LINK_LIBRARIES ( ${ROOT_BIN}
        ${Boost_LIBRARIES} ${GEOIP_LIBRARY}
        ${MAGICKPP_FLAGS}
        ${DEVSTAT_LIBRARY} ${STATGRAB_LIBRARY}
        ${WT_LIBRARY} ${WT_FCGI_LIBRARY} ${ZEROMQ_LIBRARY}
    )

    ADD_CUSTOM_COMMAND ( TARGET ${ROOT_BIN}
        POST_BUILD
        COMMAND strip ${ROOT_BIN}
        COMMAND strip -R.comment ${ROOT_BIN}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    )

    INSTALL ( FILES
        "${CMAKE_CURRENT_BINARY_DIR}/${ROOT_BIN}"
        DESTINATION "${CMAKE_INSTALL_PREFIX}"
        PERMISSIONS
        OWNER_READ OWNER_WRITE OWNER_EXECUTE
        GROUP_READ GROUP_EXECUTE
        WORLD_READ WORLD_EXECUTE
    )
    
ENDIF ( DEP_FOUND )


